{
    "version": "https://jsonfeed.org/version/1",
    "title": "筆記ZONE • All posts by \"home lab\" category",
    "description": "",
    "home_page_url": "https://zonego.tw",
    "items": [
        {
            "id": "https://zonego.tw/2023/02/21/adguardhome/",
            "url": "https://zonego.tw/2023/02/21/adguardhome/",
            "title": "AdGuard Home 擋廣告工具",
            "date_published": "2023-02-21T11:42:28.000Z",
            "content_html": "<p>一般檔廣告大家都會使用瀏覽器插，例如 AD Bolck。這邊推薦可以從 DNS 下手</p>\n<span id=\"more\"></span>\n\n<h2 id=\"DNS-檔廣告原理\"><a href=\"#DNS-檔廣告原理\" class=\"headerlink\" title=\"DNS 檔廣告原理\"></a>DNS 檔廣告原理</h2><h3 id=\"DNS原理簡介\"><a href=\"#DNS原理簡介\" class=\"headerlink\" title=\"DNS原理簡介\"></a>DNS原理簡介</h3><p>一般瀏覽網站時，我們常會使用網域名稱 domain，代替只有數字的 IP 作為連線地址</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/DNS.png\" alt=\"DNS\" data-caption=\"DNS\" loading=\"lazy\"><br>舉個例子🌰，要去 google 首頁 <a href=\"https://www.google.com/\">https://www.google.com</a> ，其中 <a href=\"http://www.google.com/\">www.google.com</a> 就是網域名稱<br>瀏覽器會先去 DNS 伺服器用網域名稱查出 Google 的伺服器 IP<br>知道 IP 後才能連到 Google 的伺服器請求資料</p>\n<p>在這中間，Google 也會順便將要顯示的廣告網址一起送回來<br>瀏覽器再照之前的流程，去廣告商的伺服器去抓廣告回來顯示</p>\n<p>想知道更多 DNS 詳細機制，可以參考 <a href=\"https://www.cloudflare.com/zh-tw/learning/dns/what-is-dns/\">Coudflare 寫的說明</a></p>\n<h3 id=\"DNS沉洞（DNS-sinkhole）\"><a href=\"#DNS沉洞（DNS-sinkhole）\" class=\"headerlink\" title=\"DNS沉洞（DNS sinkhole）\"></a>DNS沉洞（DNS sinkhole）</h3><p>看完原理後，反過來說，只要 DNS 伺服器不能正常把網域名稱換成 IP，網路就像斷了，只剩直接給 IP 的方式還能連線</p>\n<p>所以只要在 DNS 伺服器動手腳把廣告的網址設定成錯誤的IP(例如：127.0.0.1)，廣告就無法正常顯示</p>\n<p>這種作法就叫做 <code>DNS沉洞</code>（DNS sinkhole）</p>\n<p>有幾套可以自己架的 DNS 伺服器軟體可以達到這種效果，如 PI-Hole、 AdGuard Home<br>這邊主要介紹 AdGuard Home</p>\n<p><del>PI-Hole 改天在寫</del></p>\n<h2 id=\"AdGuard-Home\"><a href=\"#AdGuard-Home\" class=\"headerlink\" title=\"AdGuard Home\"></a>AdGuard Home</h2><p><a href=\"https://adguard.com/zh_tw/adguard-home/overview.html\">AdGuard Home 官方網站</a></p>\n<p><a href=\"https://github.com/AdguardTeam/AdGuardHome\">AdGuard Home GitHub repo</a></p>\n<p><img src=\"https://camo.githubusercontent.com/c6223645832b66d312f31eecbf833e23f95e363198d83de29438db55d01c8eca/68747470733a2f2f63646e2e6164746964792e6f72672f7075626c69632f416467756172642f436f6d6d6f6e2f616467756172645f686f6d652e676966\"></p>\n<p>附上 AdGuard Home 提供的功能比對表…</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>AdGuard Home</th>\n<th>Pi-Hole</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>阻擋廣告與追蹤器</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>自訂阻擋清單</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>內建 DHCP server 功能</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>HTTPS 管理介面</td>\n<td>✅</td>\n<td>❌ 需手動設定 lighttpd</td>\n</tr>\n<tr>\n<td>上游 DNS 伺服器加密<br>(DNS-over-HTTPS, DNS-over-TLS, DNSCrypt)</td>\n<td>✅</td>\n<td>❌ (需安裝額外插件)</td>\n</tr>\n<tr>\n<td>跨平台支援</td>\n<td>✅</td>\n<td>❌ (需透過 Docker)</td>\n</tr>\n<tr>\n<td>支援加密<br>DNS-over-HTTPS or DNS-over-TLS server</td>\n<td>✅</td>\n<td>❌ (需安裝額外插件)</td>\n</tr>\n<tr>\n<td>阻擋惡意網域</td>\n<td>✅</td>\n<td>❌ (需要使用另外的阻擋清單)</td>\n</tr>\n<tr>\n<td>家長管控 (阻擋成人網站)</td>\n<td>✅</td>\n<td>❌ (需自行設定阻擋清單)</td>\n</tr>\n<tr>\n<td>強制搜尋引擎啟用安全搜尋</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>Per-client (device) configuration</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>存取設定 (設定可用 AGH DNS 的名單)</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>[不需 root 權限][wiki-noroot]執行</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n</tbody></table>\n<p>基本上我們只用擋廣告的功能，AdGuardHome 跟 Pi-Hole 選順手好用的就好<br>雖說 AdGuard Home 有原生跨平台支援，不過真的要用也是用 Docker 去不同平台執行比較方便</p>\n<h2 id=\"安裝-AdGuard-Home\"><a href=\"#安裝-AdGuard-Home\" class=\"headerlink\" title=\"安裝 AdGuard Home\"></a>安裝 AdGuard Home</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p>官方有提供 Linux 系統的自動安裝腳本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\"># 可以用 wget, curl 等工具下載腳本</span><br>wget --no-verbose -O - https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/AdguardTeam/</span>AdGuardHome<span class=\"hljs-regexp\">/master/</span>scripts/install.sh | sh -s -- -v<br></code></pre></td></tr></table></figure>\n<p>腳本參數：</p>\n<ul>\n<li><code>-c &lt;channel&gt;</code> 使用特定的安裝渠道，預設是從 release 安裝，可用 <code>development</code> <code>edge</code> <code>beta</code> <code>release</code></li>\n<li><code>-r</code> 重新安裝 AdGuard Home (不可與 <code>-u</code> 一起用)</li>\n<li><code>-u</code> 移除 AdGuard Home (不可與 <code>-r</code> 一起用)</li>\n<li><code>-v</code> 查看更多安裝時訊息</li>\n</ul>\n<p>或是手動下載、安裝<br>到 <a href=\"https://github.com/AdguardTeam/AdGuardHome/releases\">GitHub Release</a> 下載對應 OS 的安裝檔<br>例如安裝 Linux x64 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">tar zxvf AdGuardHome_linux_amd64.tar.gz<br><br>./AdGuardHome -s install<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>建議使用剛裝好系統的 VM 來裝 AdGuard Home，方便備份或是避免 port 衝突</p>\n</blockquote>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>跟 Linux 手動安裝步驟相同，到 <a href=\"https://github.com/AdguardTeam/AdGuardHome/releases\">GitHub Release</a> 下載 windows 版本後執行</p>\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p><a href=\"https://hub.docker.com/r/adguard/adguardhome\">AdGuard Home Docker Hub</a></p>\n<p>docker 指令：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">docker run --name adguardhome\\<br>    --restart unless-stopped\\<br>    -v <span class=\"hljs-regexp\">/my/</span>own<span class=\"hljs-regexp\">/workdir:/</span>opt<span class=\"hljs-regexp\">/adguardhome/</span>work\\<br>    -v <span class=\"hljs-regexp\">/my/</span>own<span class=\"hljs-regexp\">/confdir:/</span>opt<span class=\"hljs-regexp\">/adguardhome/</span>conf\\<br>    -p <span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">53</span><span class=\"hljs-regexp\">/tcp -p 53:53/u</span>dp\\<br>    -p <span class=\"hljs-number\">67</span>:<span class=\"hljs-number\">67</span><span class=\"hljs-regexp\">/udp -p 68:68/u</span>dp\\<br>    -p <span class=\"hljs-number\">80</span>:<span class=\"hljs-number\">80</span><span class=\"hljs-regexp\">/tcp -p 443:443/</span>tcp -p <span class=\"hljs-number\">443</span>:<span class=\"hljs-number\">443</span><span class=\"hljs-regexp\">/udp -p 3000:3000/</span>tcp\\<br>    -p <span class=\"hljs-number\">853</span>:<span class=\"hljs-number\">853</span>/tcp\\<br>    -p <span class=\"hljs-number\">784</span>:<span class=\"hljs-number\">784</span><span class=\"hljs-regexp\">/udp -p 853:853/u</span>dp -p <span class=\"hljs-number\">8853</span>:<span class=\"hljs-number\">8853</span>/udp\\<br>    -p <span class=\"hljs-number\">5443</span>:<span class=\"hljs-number\">5443</span><span class=\"hljs-regexp\">/tcp -p 5443:5443/u</span>dp\\<br>    -d adguard/adguardhome<br></code></pre></td></tr></table></figure>\n\n<p>其中的 Port 設定</p>\n<ul>\n<li><code>-p 53:53/tcp -p 53:53/udp</code>: 預設 DNS 使用 port</li>\n<li><code>-p 67:67/udp -p 68:68/tcp -p 68:68/udp</code>: DHCP 使用 port (如不使用 DHCP 可以跳過)</li>\n<li><code>-p 3000:3000/tcp -p 443:443/tcp</code>: AdGuard Home 的管理介面 (如不需設定 HTTPS 可以不用 443 port)</li>\n<li><code>-p 80:80/tcp -p 443:443/tcp -p 443:443/udp</code>: DNS-over-HTTPS 使用 port</li>\n<li><code>-p 853:853/tcp</code>: DNS-over-TLS 使用 port</li>\n<li><code>-p 784:784/udp -p 853:853/udp -p 8853:8853/udp</code>: DNS-over-QUIC 使用 port (只需要設定其中一個或兩個，不需要全都用)</li>\n<li><code>-p 5443:5443/tcp -p 5443:5443/udp</code>: DNSCrypt 使用 port.</li>\n</ul>\n<p>如果要使用 DHCP server 的功能，建議將讓容器使用主機網路 (需注意 port 衝突)</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">docker run --name adguardhome\\<br>    --restart unless-stopped\\<br>    -v <span class=\"hljs-regexp\">/my/</span>own<span class=\"hljs-regexp\">/workdir:/</span>opt<span class=\"hljs-regexp\">/adguardhome/</span>work\\<br>    ...<br>    --network host<br>    -d adguard/adguardhome<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h2><blockquote>\n<p>這邊我是在自己的電腦上用 docker 展示，連線會用 localhost 去連<br>實際使用建議獨立裝在其他不常關的電腦或樹梅派，連線就使用 IP 連</p>\n</blockquote>\n<h3 id=\"初次設定\"><a href=\"#初次設定\" class=\"headerlink\" title=\"初次設定\"></a>初次設定</h3><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init1.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"></p>\n<h4 id=\"網路設定\"><a href=\"#網路設定\" class=\"headerlink\" title=\"網路設定\"></a>網路設定</h4><p>接下來設定監聽的網卡(透過哪張網卡能存取)，用 Docker 執行建議可以用所有介面<br>管理員的監聽介面如果在 docker 沒有使用 80，記得設定成 3000，避免設定完就連不到<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init2.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"><br>DNS 伺服器監聽介面同上，建議保留預設的 53 Port<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init3.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"></p>\n<h5 id=\"管理帳號設定\"><a href=\"#管理帳號設定\" class=\"headerlink\" title=\"管理帳號設定\"></a>管理帳號設定</h5><p>設定管理員帳號密碼，建議不要用 <code>root</code>, <code>admin</code>, <code>administor</code> 等常見的管理帳號<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init4.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"></p>\n<h4 id=\"用戶端設定\"><a href=\"#用戶端設定\" class=\"headerlink\" title=\"用戶端設定\"></a>用戶端設定</h4><p>初次設定完成，這邊可以看一下不同種類客戶端該怎麼設定使用這個 DNS 伺服器<br>基本上只要將網路設定裡的 DNS 伺服器，改成這邊監聽的網卡的IP，就可以用 Adguard 過濾網站<br>路由器也要套用的話，是去修改路由器的 DHCP 設定，讓子網段自動分配的 DNS 都使用我們架的 Adguard IP<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init5.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"><br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init6.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"></p>\n<h5 id=\"初次設定完成🎉\"><a href=\"#初次設定完成🎉\" class=\"headerlink\" title=\"初次設定完成🎉\"></a>初次設定完成🎉</h5><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_init7.png\" alt=\"adguard init\" data-caption=\"adguard init\" loading=\"lazy\"></p>\n<p>接著可以用設定好的管理員帳號登入<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_login.png\" alt=\"adguard login\" data-caption=\"adguard login\" loading=\"lazy\"></p>\n<h3 id=\"設定上游-DNS-伺服器\"><a href=\"#設定上游-DNS-伺服器\" class=\"headerlink\" title=\"設定上游 DNS 伺服器\"></a>設定上游 DNS 伺服器</h3><p>在 Adguard Home 中並不會紀錄設定之外的網域及IP的對應<br>其他網域就需要去其他的 DNS 伺服器(上游 DNS 伺服器)查詢<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_upstreamDNS.png\" alt=\"adguard upstream DNS\" data-caption=\"adguard upstream DNS\" loading=\"lazy\"></p>\n<p>Adguard Home 整理了幾個常用的 DNS 伺服器 <a href=\"https://adguard-dns.io/kb/zh-CN/general/dns-providers/\">https://adguard-dns.io/kb/zh-CN/general/dns-providers/</a><br>這邊推薦可以用 Google DNS 跟 Cloudflare DNS</p>\n<h4 id=\"Google-DNS\"><a href=\"#Google-DNS\" class=\"headerlink\" title=\"Google DNS\"></a>Google DNS</h4><table>\n<thead>\n<tr>\n<th>協定</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DNS, IPv4</td>\n<td>8.8.8.8 和 8.8.4.4</td>\n</tr>\n<tr>\n<td>DNS, IPv6</td>\n<td>2001:4860:4860::8888 和 2001:4860:4860::8844</td>\n</tr>\n<tr>\n<td>DNS-over-HTTPS</td>\n<td><a href=\"https://dns.google/dns-query\">https://dns.google/dns-query</a></td>\n</tr>\n<tr>\n<td>DNS-over-TLS</td>\n<td>tls:&#x2F;&#x2F;dns.google</td>\n</tr>\n</tbody></table>\n<h4 id=\"Cloudflare-DNS\"><a href=\"#Cloudflare-DNS\" class=\"headerlink\" title=\"Cloudflare DNS\"></a>Cloudflare DNS</h4><table>\n<thead>\n<tr>\n<th>協定</th>\n<th>地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DNS, IPv4</td>\n<td>1.1.1.1 和 1.0.0.1</td>\n</tr>\n<tr>\n<td>DNS, IPv6</td>\n<td>2606:4700:4700::1111 和 2606:4700:4700::1001</td>\n</tr>\n<tr>\n<td>DNS-over-HTTPS IPv4</td>\n<td><a href=\"https://dns.cloudflare.com/dns-query\">https://dns.cloudflare.com/dns-query</a></td>\n</tr>\n<tr>\n<td>DNS-over-HTTPS IPv6</td>\n<td><a href=\"https://dns.cloudflare.com/dns-query\">https://dns.cloudflare.com/dns-query</a></td>\n</tr>\n<tr>\n<td>DNS-over-TLS</td>\n<td>tls:&#x2F;&#x2F;1dot1dot1dot1.cloudflare-dns.com</td>\n</tr>\n</tbody></table>\n<h2 id=\"過濾器設定\"><a href=\"#過濾器設定\" class=\"headerlink\" title=\"過濾器設定\"></a>過濾器設定</h2><h3 id=\"過濾黑名單\"><a href=\"#過濾黑名單\" class=\"headerlink\" title=\"過濾黑名單\"></a>過濾黑名單</h3><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_blocklist.png\" alt=\"adguard blocklist\" data-caption=\"adguard blocklist\" loading=\"lazy\"></p>\n<h4 id=\"預設黑名單\"><a href=\"#預設黑名單\" class=\"headerlink\" title=\"預設黑名單\"></a>預設黑名單</h4><p>Adguard Home 預設使用 Adguard 的過濾黑名單<br>新增黑名單也很方便<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_blocklist_new.png\" alt=\"adguard blocklist new\" data-caption=\"adguard blocklist new\" loading=\"lazy\"><br>把想套用的黑名單加進去啟用<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_blocklist_new2.png\" alt=\"adguard blocklist new\" data-caption=\"adguard blocklist new\" loading=\"lazy\"></p>\n<h4 id=\"第三方黑名單\"><a href=\"#第三方黑名單\" class=\"headerlink\" title=\"第三方黑名單\"></a>第三方黑名單</h4><p>要使用第三方黑名單只要有網址也可以匯入<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_blocklist_new3.png\" alt=\"adguard blocklist new\" data-caption=\"adguard blocklist new\" loading=\"lazy\"><br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_blocklist_new4.png\" alt=\"adguard blocklist new\" data-caption=\"adguard blocklist new\" loading=\"lazy\"></p>\n<p>這邊介紹一款專為臺灣人設計的廣告阻擋規則 <a href=\"https://github.com/FutaGuard/LowTechFilter\">LowTechFilter</a><br>提供阻擋台灣常見的簡訊詐騙、釣魚網站和農場文</p>\n<ul>\n<li>簡訊詐騙、釣魚網站 <a href=\"https://filter.futa.gg/hosts.txt\">https://filter.futa.gg/hosts.txt</a>  </li>\n<li>農場文 <a href=\"https://filter.futa.gg/nofarm_hosts.txt\">https://filter.futa.gg/nofarm_hosts.txt</a></li>\n</ul>\n<h3 id=\"手動過濾規則\"><a href=\"#手動過濾規則\" class=\"headerlink\" title=\"手動過濾規則\"></a>手動過濾規則</h3><p>可以從主頁到 DNS 查詢紀錄裡去增加封鎖名單，不過缺點是之前要先查詢過</p>\n<blockquote>\n<p>還沒有用戶端用這個 DNS 伺服器之前，紀錄會是空的<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_dashboard.png\" alt=\"adguard dashboard\" data-caption=\"adguard dashboard\" loading=\"lazy\"><br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_record.png\" alt=\"adguard record\" data-caption=\"adguard record\" loading=\"lazy\"></p>\n</blockquote>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"家長管控\"><a href=\"#家長管控\" class=\"headerlink\" title=\"家長管控\"></a>家長管控</h3><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/adguard_ad.png\" alt=\"adguard blocklist new\" data-caption=\"adguard blocklist new\" loading=\"lazy\"></p>\n",
            "tags": [
                "Self-Hosting",
                "Windows",
                "Linux",
                "DNS"
            ]
        },
        {
            "id": "https://zonego.tw/2023/02/10/wikijs-keyckoak/",
            "url": "https://zonego.tw/2023/02/10/wikijs-keyckoak/",
            "title": "設定 WikiJS 使用 Keyckoak 做身分認證",
            "date_published": "2023-02-10T06:35:35.000Z",
            "content_html": "<p>最近在設定 WikiJS 串接 Keycloak 作身分認證時碰到一些問題，所以在這邊做個紀錄<br>這邊就跳過安裝過程</p>\n<span id=\"more\"></span>\n\n<p>紀錄時使用版本： <code>WikiJS 2.5.296</code>  <code>Keycloak 20.0.3</code></p>\n<h2 id=\"Keycloak-設定\"><a href=\"#Keycloak-設定\" class=\"headerlink\" title=\"Keycloak 設定\"></a>Keycloak 設定</h2><p>挑選你要設定登入的 realm ，這邊我為了不要應用程式的帳號跟 Keycloak 的管理帳號混用，建一個新的 realm 叫做 demo</p>\n<blockquote>\n<p>realm 像是用來管理帳號的群組，在這個群組內建好的應用方式都可以透過這些帳號登入</p>\n</blockquote>\n<h3 id=\"新增-client\"><a href=\"#新增-client\" class=\"headerlink\" title=\"新增 client\"></a>新增 client</h3><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-new_client.png\" alt=\"creat\" data-caption=\"creat\" loading=\"lazy\"></p>\n<p>打上 client ID (不可重複) ，next 下一步<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-new_client2.png\" alt=\"creat\" data-caption=\"creat\" loading=\"lazy\"></p>\n<p>這邊 Client authentication 必須要勾選，才會產生後面要用到的 Client Secret。點 Save 儲存<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-new_client3.png\" alt=\"creat\" data-caption=\"creat\" loading=\"lazy\"></p>\n<h3 id=\"設定-client\"><a href=\"#設定-client\" class=\"headerlink\" title=\"設定 client\"></a>設定 client</h3><p>打開剛剛建好的 client <code>wiki</code><br>下滑到 Access Setting<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-access-setting.png\" alt=\"setting\" data-caption=\"setting\" loading=\"lazy\"></p>\n<p>假設我們的 wikijs 網址是 <a href=\"https://wiki.example.com/\">https://wiki.example.com</a></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>填入URL</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Root URL</td>\n<td><a href=\"https://wiki.example.com/\">https://wiki.example.com</a></td>\n<td>網站根網址</td>\n</tr>\n<tr>\n<td>Home URL</td>\n<td><a href=\"https://wiki.example.com/\">https://wiki.example.com</a></td>\n<td>登入後重導向的根網址 (通常跟 root url 相同)</td>\n</tr>\n<tr>\n<td>Valid rediect URIs</td>\n<td>&#x2F;XXXXXXXX&#x2F;callback<br>&#x2F;*</td>\n<td>允許重導向頁面網址<br>用 * 可以代表所有頁面，但要注意安全性</td>\n</tr>\n<tr>\n<td>Valid post logout</td>\n<td><a href=\"https://wiki.example.com/\">https://wiki.example.com</a></td>\n<td>允許登出後轉向的頁面</td>\n</tr>\n<tr>\n<td>redirect URIs</td>\n<td>&#x2F;*</td>\n<td>允許登出後的重導向位置</td>\n</tr>\n<tr>\n<td>Web origins</td>\n<td></td>\n<td>允許 CORS origins 的網址</td>\n</tr>\n</tbody></table>\n<p><code>Valid rediect URIs</code> 可以在後面設定 wikijs 時取得</p>\n<p>如果你的 Keycloak 有安裝客製主題，可以在 Login settings 裡修改<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-login-theme.png\" alt=\"setting\" data-caption=\"setting\" loading=\"lazy\"></p>\n<p>Credentials 分頁有後續會用到的 client key，可以先複製<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-client_key.png\" alt=\"setting\" data-caption=\"setting\" loading=\"lazy\"></p>\n<h2 id=\"Wikijs-設定\"><a href=\"#Wikijs-設定\" class=\"headerlink\" title=\"Wikijs 設定\"></a>Wikijs 設定</h2><p>進到設定後選認證 &gt; 新增登入機制<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>選擇 Keycloak<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider2.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>再來填入你的 Keycloak 網址、realm 名稱跟剛剛建好的 Client ID<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider3.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>下面4個網址可以參考 wikijs 的提示，不過左邊的 <code>/auth</code> 要去掉，例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><code class=\"hljs awk\">wikij 提示<br>https:<span class=\"hljs-regexp\">//</span>KEYCLOAK-HOST<span class=\"hljs-regexp\">/auth/</span>realms<span class=\"hljs-regexp\">/YOUR-REALM/</span>protocol<span class=\"hljs-regexp\">/openid-connect/</span>auth<br><br>左邊的 /auth 去掉，範例的 realms 是 demo<br>https:<span class=\"hljs-regexp\">//y</span>our.keycloak-host.com<span class=\"hljs-regexp\">/realms/</span>demo<span class=\"hljs-regexp\">/protocol/</span>openid-connect/auth<br></code></pre></td></tr></table></figure>\n\n<p>Client Secret 貼上 Keycloak Credentials 內複製的金鑰<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider4.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>開放自由註冊可以斟酌打開，若沒開沒登入過的帳號會無法登入<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider5.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>最下面可以取得 keycloak 設定需要的 Valid rediect URI<br>只需要填 &#x2F;login&#x2F;a28088b1-8e47-4d16-aa6f-0a32d8af192f&#x2F;callback<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider6.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<p>設定完記得卷到上面點套用設定<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider3.png\" alt=\"wikijs\" data-caption=\"wikijs\" loading=\"lazy\"></p>\n<hr>\n<h2 id=\"問題排除\"><a href=\"#問題排除\" class=\"headerlink\" title=\"問題排除\"></a>問題排除</h2><h3 id=\"登出時遇到-invalid-parameter-redirect-uri\"><a href=\"#登出時遇到-invalid-parameter-redirect-uri\" class=\"headerlink\" title=\"登出時遇到 invalid parameter redirect_uri\"></a>登出時遇到 invalid parameter redirect_uri</h3><p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/invalid-parameter-redirect_uri.png\" alt=\"invalid parameter redirect_uri\" data-caption=\"invalid parameter redirect_uri\" loading=\"lazy\"></p>\n<p>keycloak 在 18 版之後就不支援登出時使用<code>redirect_uri</code>參數，所以只能先暫時先把 WikiJS 的同步登出先關閉，等 WikiJS 更新<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/keycloak-wikijs-provider5.png\" alt=\"WikiJS sync logout\" data-caption=\"WikiJS sync logout\" loading=\"lazy\"></p>\n<blockquote>\n<p>關閉後的缺點是在同一台裝置，session 未過期前，點一下 keycloak 登入就會自動登進去</p>\n</blockquote>\n",
            "tags": [
                "Self-Hosting",
                "Wiki JS",
                "Keyckoak",
                "身分認證"
            ]
        },
        {
            "id": "https://zonego.tw/2023/02/10/cloudflare-page/",
            "url": "https://zonego.tw/2023/02/10/cloudflare-page/",
            "title": "Cloudflare Page 架站教學",
            "date_published": "2023-02-10T04:39:40.000Z",
            "content_html": "<p>Cloudflare Page 使用上跟 GitHub Page 類似<br>就差在 GitHub Page 只能用靜態網站檔案，用框架產生的靜態網站就必須先編好才能推上去儲藏庫<br>Cloudflare Page 可以支援編譯</p>\n<span id=\"more\"></span>\n\n<h2 id=\"設定步驟\"><a href=\"#設定步驟\" class=\"headerlink\" title=\"設定步驟\"></a>設定步驟</h2><p>官方文件 <a href=\"https://developers.cloudflare.com/pages/\">https://developers.cloudflare.com/pages/</a></p>\n<p>簡單步驟總結：</p>\n<ol>\n<li><p>在 GitHub 或 GitLab 建立網頁用的儲藏庫 (repository)</p>\n</li>\n<li><p>Cloudflare page 連結 GitHub 或 GitLab</p>\n</li>\n<li><p>在 Cloudflare 設定網站用的 domain name</p>\n</li>\n</ol>\n<p>完成🎉</p>\n<hr>\n<h3 id=\"設定-Git-儲藏庫\"><a href=\"#設定-Git-儲藏庫\" class=\"headerlink\" title=\"設定 Git 儲藏庫\"></a>設定 Git 儲藏庫</h3><p>首先到 GitHub 或 GitLab 建立網頁用的儲藏庫 (就基本的 git 操作，這邊就不多作教學)</p>\n<p>網站內容跟 GitHub Page 一樣，只要是靜態網站都可以，不管是直接寫或是用框架產生都可以<br>比 GitHub Page 好的一點是，可以直接推送框架的程式上去，部署時編譯 (但免費版有限制)</p>\n<p>GitHub Page 跟 Cloudflare page 也不需要太糾結要用哪個，反正都免費都可以先用看看<br>例如本網站的內容就是用 Hexo 框架產生，先推送到 GitHub Page，Cloudflare page 用同個儲藏庫當來源</p>\n<p><img src=\"https://i.imgur.com/wBJAHWU.gif\"></p>\n<p>在 <a href=\"https://zonelin.github.io/\">https://zonelin.github.io/</a> 也可以找到本站</p>\n<h3 id=\"Cloudflare-新增-page-專案\"><a href=\"#Cloudflare-新增-page-專案\" class=\"headerlink\" title=\"Cloudflare 新增 page 專案\"></a>Cloudflare 新增 page 專案</h3><p>登入 Cloudflare 在 page 設定內新增一個專案　<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-addproject.png\" alt=\"Cloudflare add project\" data-caption=\"Cloudflare add project\" loading=\"lazy\"></p>\n<p>登入 GitHub 或 GitLab 選擇要用的存儲庫 repository<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-addproject-git.png\" alt=\"Cloudflare add project\" data-caption=\"Cloudflare add project\" loading=\"lazy\"></p>\n<p>設定要觸發抓取的分支 (建議把部署跟開發中做不同的分支)<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-addproject-setting.png\" alt=\"Cloudflare add project\" data-caption=\"Cloudflare add project\" loading=\"lazy\"></p>\n<p>如果是想要推送後，再用框架產生靜態網頁可以調整這邊設定<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-addproject-setting2.png\" alt=\"Cloudflare add project\" data-caption=\"Cloudflare add project\" loading=\"lazy\"></p>\n<p>點儲存部屬 Save and Deploy 後會開始從 Git 存儲庫抓程式碼下來編譯<br>如果是靜態頁面，就只有抓下來 (畢竟我們的 Build setting 是空的)<br>完成會自動給一個自動分配的網址，例如本站就是 <a href=\"https://blog-public-3io.pages.dev/\">blog-public-3io.pages.dev</a></p>\n<p>需要自訂網址可以到專案的 Custom domains 設定，免費版有使用上限 <a href=\"#%E5%85%8D%E8%B2%BB%E7%89%88%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6\">免費版限制</a><br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-domain.png\" alt=\"Cloudflare domain\" data-caption=\"Cloudflare domain\" loading=\"lazy\"></p>\n<p>到這邊就完成了🎉</p>\n<p>用 Cloudflare 還有個好處，Cloudflare 會自動套 Web Analytics<br><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/cfpage-web-analytics.png\" alt=\"Cloudflare web analytics\" data-caption=\"Cloudflare web analytics\" loading=\"lazy\"></p>\n<h2 id=\"免費版使用限制\"><a href=\"#免費版使用限制\" class=\"headerlink\" title=\"免費版使用限制\"></a>免費版使用限制</h2><p>根據<a href=\"https://developers.cloudflare.com/pages/platform/limits\">官方文件</a></p>\n<p>每個帳號可以件幾個網站專案、預覽板本好像沒限制</p>\n<h3 id=\"建置\"><a href=\"#建置\" class=\"headerlink\" title=\"建置\"></a>建置</h3><p>免費版能從 GitHub 抓程式碼重新建置每個月500次，建置時間不得過20分鐘<br>推送程式碼到 GitHub 也會觸發重新建置</p>\n<blockquote>\n<p>所以我習慣在本機把 hexo 建制好，再推送到 GitHub，省編譯時間</p>\n</blockquote>\n<h3 id=\"Domains\"><a href=\"#Domains\" class=\"headerlink\" title=\"Domains\"></a>Domains</h3><p>最多 10 個自訂 domain</p>\n<h3 id=\"檔案\"><a href=\"#檔案\" class=\"headerlink\" title=\"檔案\"></a>檔案</h3><p>單一個網站專案，最多到 2 萬個檔案<br>單一檔案、素材最大 25MB</p>\n<blockquote>\n<p>有放圖片要注意下容量</p>\n</blockquote>\n<h3 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h3><p>最多 100 header 規則</p>\n<h3 id=\"重導向規則\"><a href=\"#重導向規則\" class=\"headerlink\" title=\"重導向規則\"></a>重導向規則</h3><p>最多 100 個</p>\n<hr>\n",
            "tags": [
                "網站架設",
                "Cloudflare",
                "靜態網站",
                "Git"
            ]
        },
        {
            "id": "https://zonego.tw/2021/11/25/gitea/",
            "url": "https://zonego.tw/2021/11/25/gitea/",
            "title": "Gitea - Git 自架伺服器首選",
            "date_published": "2021-11-25T11:22:30.000Z",
            "content_html": "<p>作為寫過程式的人，Git是必備工具 <del>除非只是寫好玩的</del></p>\n<p>常見的線上Git儲藏庫就是 <a href=\"https://github.com/\">GitHub</a>、<a href=\"https://about.gitlab.com/\">Gitlab</a>、<a href=\"https://bitbucket.org/\">Bitbucket</a></p>\n<p>對於這些公開平台不放心，或是程式碼不想外流，那就自己架私服吧!</p>\n<p>常見的有 <a href=\"https://gitea.io/\">Gitea</a>、<a href=\"https://gogs.io/\">gogs</a>或是<a href=\"https://about.gitlab.com/\">Gitlab</a></p>\n<p>Gitlab裡面包含 CI&#x2F;CD 工具等功能，十分肥大</p>\n<p>想要一個安裝簡單、功能近似GitHub又有中文介面，那就選 Gitea 吧！</p>\n<h1 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h1><p><a href=\"https://docs.gitea.io/\">說明文件</a></p>\n<p>Gitea 提供很多安裝方式，我這邊選則用 docker <del>手邊有現成的docker伺服器，不用白不用</del></p>\n<p><a href=\"https://docs.gitea.io/zh-tw/install-with-docker-rootless/\">docker-compose 安裝說明</a></p>\n<h2 id=\"選擇版本\"><a href=\"#選擇版本\" class=\"headerlink\" title=\"選擇版本\"></a>選擇版本</h2><p>Gitea 的官方映像可以在 <a href=\"https://hub.docker.com/r/gitea/gitea/\">Docker Hub</a> 找到</p>\n<p>版本 tag 與 Gitea 的 <a href=\"https://github.com/go-gitea/gitea\"><i class=\"nexmoefont icon-github\"></i> Github</a> 上發布的版本號一樣</p>\n<p><code>latest</code> 則是最新的穩定版</p>\n<h2 id=\"選擇資料庫\"><a href=\"#選擇資料庫\" class=\"headerlink\" title=\"選擇資料庫\"></a>選擇資料庫</h2><p>Gitea 支援多種資料庫，例如 <code>mysql</code> <code>mariadb</code> <code>PostgreSQL</code></p>\n<h2 id=\"安裝過程\"><a href=\"#安裝過程\" class=\"headerlink\" title=\"安裝過程\"></a>安裝過程</h2><p>使用 docker-compose 安裝</p>\n<p>我這邊選用 mysql 資料庫</p>\n<p>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;2&quot;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">server:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">gitea/gitea:1.15.6-rootless</span><br>     <span class=\"hljs-attr\">environment:</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITEA__database__DB_TYPE=mysql</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITEA__database__HOST=db:3306</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITEA__database__NAME=gitea</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITEA__database__USER=gitea</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">GITEA__database__PASSWD=gitea</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./data:/var/lib/gitea</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./config:/etc/gitea</span>  <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/timezone:/etc/timezone:ro</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/etc/localtime:/etc/localtime:ro</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10080:3000&quot;</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10022:22&quot;</span><br>     <span class=\"hljs-attr\">depends_on:</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">db</span><br> <br>   <span class=\"hljs-attr\">db:</span><br>     <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">mysql:8</span><br>     <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>     <span class=\"hljs-attr\">environment:</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=gitea</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">MYSQL_USER=gitea</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">MYSQL_PASSWORD=gitea</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">MYSQL_DATABASE=gitea</span><br>     <span class=\"hljs-attr\">volumes:</span><br>       <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./mysql:/var/lib/mysql</span><br></code></pre></td></tr></table></figure>\n\n<p>執行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">docker-compose up<br></code></pre></td></tr></table></figure>\n\n<p>完成後可以用 <a href=\"http://hostname:10080/\">http://hostname:10080</a> 連到你剛剛架的 gitea</p>\n<p>SSH 要使用 10022 例如 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> ssh://git@hostname:10022/username/repo.git<br></code></pre></td></tr></table></figure>\n\n<p>如果想用預設 Port</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#將這段</span><br><span class=\"hljs-attr\">ports:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10080:3000&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;10022:22&quot;</span><br><br><span class=\"hljs-comment\">#換成這段</span><br><span class=\"hljs-attr\">ports:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;80:3000&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;22:22&quot;</span>      <br></code></pre></td></tr></table></figure>",
            "tags": [
                "Self-Hosting",
                "Git",
                "Gitea"
            ]
        },
        {
            "id": "https://zonego.tw/2021/11/14/gitea-gmail/",
            "url": "https://zonego.tw/2021/11/14/gitea-gmail/",
            "title": "Gitea 使用 Gmail 寄信",
            "date_published": "2021-11-14T04:39:30.000Z",
            "content_html": "<span id=\"more\"></span>\n\n<h2 id=\"建立-Gmail-應用程式密碼\"><a href=\"#建立-Gmail-應用程式密碼\" class=\"headerlink\" title=\"建立 Gmail 應用程式密碼\"></a>建立 Gmail 應用程式密碼</h2><p>Google 基於安全性，禁用直接用密碼存取 smtp<br>取而代之要先建立應用程式密碼，代替原本密碼的功能</p>\n<p>管理 Google 帳戶 &gt; 安全性 &gt; 登入 Google &gt; 應用程式密碼</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/google_account.jpg\" alt=\"Google Account\" data-caption=\"Google Account\" loading=\"lazy\"></p>\n<p>應用選郵件，裝置只是方便管理的名稱，可以選其他自己寫</p>\n<p><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/images/content/google_appkey.jpg\" alt=\"Google APP KEY\" data-caption=\"Google APP KEY\" loading=\"lazy\"></p>\n<p>完成後會產生一組密碼，建議用完之後就忘掉他，下次要用忘記時再建新的就好</p>\n<h2 id=\"設定-container-環境變數\"><a href=\"#設定-container-環境變數\" class=\"headerlink\" title=\"設定 container 環境變數\"></a>設定 container 環境變數</h2><p>我的 gitea 是使用 Docker 架的</p>\n<p>gitea 官方鏡像有提供透過環境變數設定，不用另外修改設定檔</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><code class=\"hljs routeros\">environment:<br>  - <span class=\"hljs-attribute\">GITEA__mailer__ENABLED</span>=<span class=\"hljs-literal\">true</span><br>  - <span class=\"hljs-attribute\">GITEA__mailer__FROM</span>=寄件者信箱<br>  - <span class=\"hljs-attribute\">GITEA__mailer__MAILER_TYPE</span>=smtp<br>  - <span class=\"hljs-attribute\">GITEA__mailer__HOST</span>=smtp.gmail.com:465<br>  - <span class=\"hljs-attribute\">GITEA__mailer__IS_TLS_ENABLED</span>=<span class=\"hljs-literal\">true</span><br>  - <span class=\"hljs-attribute\">GITEA__mailer__USER</span>=你的Gmail<br>  - <span class=\"hljs-attribute\">GITEA__mailer__PASSWD</span>=應用程式密碼<br></code></pre></td></tr></table></figure>\n\n<p>改完之後到 Gitea 網站 &gt; 網站管理 &gt; 組態<br>往下捲找到 SMTP 組態，可以測試寄信</p>\n<p><a href=\"https://docs.gitea.io/en-us/install-with-docker/#managing-deployments-with-environment-variables\">詳細參考</a></p>\n",
            "tags": [
                "Google",
                "Git",
                "Gitea",
                "GMail"
            ]
        }
    ]
}